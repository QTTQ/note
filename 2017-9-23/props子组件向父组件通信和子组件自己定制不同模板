<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    // 父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。

    <div id="counter-event-example">
        <p>{{ total }}</p>
        <button-counter v-on:increment="incrementTotal"></button-counter>
        <button-counter v-on:increment="incrementTotal"></button-counter>
    </div>
    <script>
        Vue.component('button-counter', {
            template: '<button v-on:click="incrementCounter">{{ counter }}</button>',
            data: function () {
                return {
                    counter: 0
                }
            },
            methods: {
                incrementCounter: function () {
                    this.counter += 1
                    this.$emit('increment')
                }
            },
        })
        new Vue({
            el: '#counter-event-example',
            data: {
                total: 0
            },
            methods: {
                incrementTotal: function () {
                    this.total += 1
                }
            }
        }
    </script> // /* 定制一样模板 不同显示数据 */ //
    <div id="app">
        //
        <c-h bt-n="hhahah"></c-h>
        //
        <c-h bt-n="sdasdas"></c-h>
        // </div>

    let cH = { props: ['btN'], template: `
    <div>
        <input type="button" :value="btN">
        <span>{{btN}}</span>
    </div>
    `, } new Vue({ el: "#app", data() { return { } }, components: { cH } }) /** * 父组件向子组件传值 */
    <div>
        <div>父组件</div>
        <input type="button" value="按钮" @click="addD">
        <child :message="parentMsg"></child>
    </div>

    <script>
        let child = {
                template: `<div>
        <div>{{message}}(子组件)</div>
        <div v-for='item in message'>{{item}}(子组件)</div>        
    </div>`,
                // props: {
                //     message: String
                // },
                props: ['message'],
                data() {
                    return {}
                }
            }
        var vm = new Vue({
            el: '#app1',
            data() {
                return {
                    parentMsg: []  //在data中定义需要传入的值
                }
            },
            components: {
                child
            },
            methods: {
                addD() {
                    this.parentMsg.push(1);
                }
            }
        });
    </script>

</body>

</html>